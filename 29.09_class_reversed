#include <iostream>

using namespace std;


class stack {

private:
	struct node {
		int value;
		node* prev = nullptr; //NULL
	};
	node* top;
	bool is_empty();
	unsigned int sz = 0;

public: //public API
	stack() : top(nullptr) {}
	~stack() {}
	void push(int value);
	int* pop();
	void reverse();
};


bool stack::is_empty() {
	return !top;
}


// stack::stack() {
// 	top = nullptr;
// }

void stack::push(int value) {
	node* tmp = new node();
	tmp->value = value;
	tmp->prev = top;
	top = tmp;
	sz++;
}

void stack::reverse() {
	node**stack_ptrs = new node*[sz];
	for (int i = 0; i < 10; i++) {
		stack_ptrs[i] = top;
		pop();
	}
	for (int j = 0; j < 10; j++) {
		int *lev;
		*lev = stack_ptrs[j];
		stack_ptrs[j] = stack_ptrs[j + 1];
		stack_ptrs[j + 1] = *lev;

	}
}


int* stack::pop() {
	if (!is_empty()) {
		int* tmp_val = new int(top->value);
		node* tmp_top = top;
		top = top->prev;
		delete tmp_top;
		return tmp_val;
		sz--;
	}
	return nullptr;
}



int main() {
	stack tolya;
	int *p = nullptr;
	for (int i = 1; i < 10; i++) {
		tolya.push(i);
	}
	tolya.reverse();
	for (int i = 0; i < 9; i++) {
		cout << *(tolya.pop());
	}

	



	return 0;
}
